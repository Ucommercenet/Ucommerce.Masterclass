@using Ucommerce
@using Ucommerce.Catalog.Models

@{
    Layout = "~/Views/shared/_Layout.cshtml";
}

<div class="container" id="app-checkout">
    <div class="row mt-4">
        <div class="col-8">
            <div class="row bg-light p-3 me-1">
                <legend>Basket</legend>
                <div class="row" v-for="orderLine in CheckoutModel.PurchaseOrderViewModel.OrderLines">
                    <div class="col-4">
                        {{orderLine.ProductName}}
                    </div>
                    <div class="col-4 text-center">
                        <span style="cursor: pointer;" v-on:click="updateOrderLine(orderLine.OrderLineId, orderLine.Quantity - 1)">-</span>
                        {{orderLine.Quantity}}
                        <span style="cursor: pointer;" v-on:click="updateOrderLine(orderLine.OrderLineId, orderLine.Quantity + 1)">+</span>
                    </div>
                    <div class="col-4 text-end" v-if="orderLine.Discount">
                        <span style="text-decoration: line-through">
                            {{orderLine.Total}}
                        </span>
                        {{orderLine.TotalWithDiscount}}
                    </div>
                    <div class="col-4 text-end" v-else>
                        {{orderLine.Total}}
                    </div>
                </div>
            </div>
            <div class="row bg-light p-3 mt-4 me-1">
                <legend>Billing information</legend>
                <div class="col-6">
                    <label for="billingfirstname" class="form-label">First name</label>
                    <input type="text" v-on:blur="updateBillingAddress" v-model="CheckoutModel.AddressViewModel.FirstName" class="form-control" id="billingfirstname"></input>
                </div>
                <div class="col-6">
                    <label for="billinglastname" class="form-label">Last name</label>
                    <input type="text" v-on:blur="updateBillingAddress" v-model="CheckoutModel.AddressViewModel.LastName" class="form-control" id="billinglastname"></input>
                </div>
                <div class="col-6">
                    <label for="billingaddress" class="form-label">Address</label>
                    <input type="text" v-on:blur="updateBillingAddress" class="form-control" v-model="CheckoutModel.AddressViewModel.Line1" id="billingaddress"></input>
                </div>
                <div class="col-6">
                    <label for="billingcity" class="form-label">City</label>
                    <input type="text" v-on:blur="updateBillingAddress" v-model="CheckoutModel.AddressViewModel.City" class="form-control" id="billingcity"></input>
                </div>
                <div class="col-6">
                    <label for="billingpostal" class="form-label">Postal Code</label>
                    <input type="text" v-on:blur="updateBillingAddress" v-model="CheckoutModel.AddressViewModel.PostalCode" class="form-control" id="billingpostal"></input>
                </div>
                <div class="col-6">
                    <label for="billingcountry" class="form-label">Country</label>
                    <select v-on:change="updateBillingAddress" name="" id="billingcountry" v-model="CheckoutModel.AddressViewModel.Country" class="form-control">
                        <option value="" disabled>Select a country</option>
                        <option :value="country" v-for="country in CheckoutModel.Countries">{{ country.Name }}</option>
                    </select>
                </div>
                <div class="col-6">
                    <label for="billingemail" class="form-label">Email</label>
                    <input type="text" v-on:blur="updateBillingAddress" v-model="CheckoutModel.AddressViewModel.EmailAddress" class="form-control" id="billingemail"></input>
                </div>
                <div class="col-6">
                    <label for="billingphone" class="form-label">Phone</label>
                    <input v-on:blur="updateBillingAddress" v-model="CheckoutModel.AddressViewModel.PhoneNumber" type="text" class="form-control" id="billingphone"></input>
                </div>
                <div class="col-12">
                    <label for="showShippingAddressFields" class="form-label">Use a different shipping address</label>
                    <input type="checkbox" id="showShippingAddressFields" v-model="CheckoutModel.DifferentShippingAddress" v-on:click="CheckoutModel.DifferentShippingAddress = !CheckoutModel.DifferentShippingAddress" />
                </div>
            </div>
            <div class="row bg-light p-3 mt-4 me-1" v-if="CheckoutModel.DifferentShippingAddress">
                <legend>Shipping information</legend>
                <div class="col-6">
                    <label for="shippingfirstname" class="form-label">First name</label>
                    <input type="text" v-on:blur="updateShippingAddress" v-model="CheckoutModel.ShippingAddressViewModel.FirstName" class="form-control" id="shippingfirstname"></input>
                </div>
                <div class="col-6">
                    <label for="shippinglastname" class="form-label">Last name</label>
                    <input type="text" v-on:blur="updateShippingAddress" v-model="CheckoutModel.ShippingAddressViewModel.LastName" class="form-control" id="shippinglastname"></input>
                </div>
                <div class="col-6">
                    <label for="shippingaddress" class="form-label">Address</label>
                    <input type="text" v-on:blur="updateShippingAddress" class="form-control" v-model="CheckoutModel.ShippingAddressViewModel.Line1" id="shippingaddress"></input>
                </div>
                <div class="col-6">
                    <label for="shippingcity" class="form-label">City</label>
                    <input type="text" v-on:blur="updateShippingAddress" v-model="CheckoutModel.ShippingAddressViewModel.City" class="form-control" id="shippingcity"></input>
                </div>
                <div class="col-6">
                    <label for="shippingpostal" class="form-label">Postal Code</label>
                    <input type="text" v-on:blur="updateShippingAddress" v-model="CheckoutModel.ShippingAddressViewModel.PostalCode" class="form-control" id="shippingpostal"></input>
                </div>
                <div class="col-6">
                    <label for="shippingcountry" class="form-label">Country</label>
                    <select v-on:change="updateShippingAddress" name="" id="shippingcountry" v-model="CheckoutModel.ShippingAddressViewModel.Country" class="form-control">
                        <option value="" disabled>Select a country</option>
                        <option :value="country" v-for="country in CheckoutModel.Countries">{{ country.Name }}</option>
                    </select>
                </div>
                <div class="col-6">
                    <label for="shippingemail" class="form-label">Email</label>
                    <input type="text" v-on:blur="updateShippingAddress" v-model="CheckoutModel.ShippingAddressViewModel.EmailAddress" class="form-control" id="shippingemail"></input>
                </div>
                <div class="col-6">
                    <label for="shippingphone" class="form-label">Phone</label>
                    <input v-on:blur="updateShippingAddress" v-model="CheckoutModel.ShippingAddressViewModel.PhoneNumber" type="text" class="form-control" id="shippingphone"></input>
                </div>
            </div>
        </div>
        <div class="col-4 p-0">
            <div class="row bg-light p-3 ms-1">
                <div class="col-md-12">
                    <legend>Shipping Method</legend>
                    <div v-for="shippingMethod in CheckoutModel.ShippingViewModel.AvailableShippingMethods">
                        <input v-on:change="updateShippingMethod" :value="shippingMethod" type="radio" v-model="CheckoutModel.ShippingViewModel.SelectedShippingMethod" :disabled="CheckoutModel.AddressViewModel.FirstName === null" /> {{ shippingMethod.Name }}
                    </div>
                </div>
            </div>

            <div class="row bg-light p-3 mt-4 ms-1">
                <div class="col-md-12">
                    <legend>Payment Method</legend>
                    <div v-for="paymentMethod in CheckoutModel.PaymentViewModel.AvailablePaymentMethods">
                        <input v-on:change="updatePaymentMethod" :value="paymentMethod" type="radio" v-model="CheckoutModel.PaymentViewModel.SelectedPaymentMethod" /> {{ paymentMethod.Name }}
                    </div>
                </div>
            </div>

            <div class="row bg-light p-3 mt-4 ms-1">
                <div class="row">
                    <div class="col-6">
                        Sub total
                    </div>
                    <div class="col-6 text-end">
                        {{ CheckoutModel.SubTotal }}
                    </div>
                </div>
                <div class="row">
                    <div class="col-6">
                        VAT
                    </div>
                    <div class="col-6 text-end">
                        {{ CheckoutModel.TaxTotal }}
                    </div>
                </div>
                <div class="row">
                    <div class="col-6">
                        Discounts
                    </div>
                    <div class="col-6 text-end">
                        {{ CheckoutModel.Discount }}
                    </div>
                </div>
                <div class="row">
                    <div class="col-6">
                        Shipping Total
                    </div>
                    <div class="col-6 text-end">
                        {{ CheckoutModel.ShippingTotal }}
                    </div>
                </div>
                <div class="row">
                    <div class="col-6">
                        Payment Total
                    </div>
                    <div class="col-6 text-end">
                        {{ CheckoutModel.PaymentTotal }}
                    </div>
                </div>
                <div class="row">
                    <div class="col-6">
                        Order Total
                    </div>
                    <div class="col-6 text-end">
                        {{ CheckoutModel.OrderTotal }}
                    </div>
                </div>
                <div class="row p-3 mt-4 ms-1">
                    <button v-on:click="complete" class="btn btn-primary">Complete Order</button>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.24.0/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"></script>
    <script>
        var app = new Vue({
            el: '#app-checkout',
            data: {
                CheckoutModel: {
                    PurchaseOrderViewModel: {},
                    AddressViewModel: {},
                    ShippingAddressViewModel: {},
                    ShippingViewModel: {},
                    PaymentViewModel: {},
                    DifferentShippingAddress: false
                }
            },
            methods: {
                refreshBasket: function () {
                    axios.get('/umbraco/api/basket/get', this.CheckoutModel).then(response => {
                        this.CheckoutModel = response.data;
                    });
                },
                updateShippingAddress: function () {
                    axios.post('/umbraco/api/addresses/updateShipping', this.CheckoutModel.ShippingAddressViewModel).then(response => {
                        this.refreshBasket();
                    });
                },
                updateBillingAddress: function () {
                    axios.post('/umbraco/api/addresses/updateBilling', this.CheckoutModel.AddressViewModel).then(response => {
                        this.refreshBasket();
                    });

                    if (!this.CheckoutModel.DifferentShippingAddress)
                        axios.post('/umbraco/api/addresses/updateShipping', this.CheckoutModel.AddressViewModel).then(response => {
                            this.refreshBasket();
                        });
                },
                updateShippingMethod: function () {
                    axios.post('/umbraco/api/shippingMethod/update', this.CheckoutModel).then(response => {
                        this.refreshBasket();
                    });
                },
                updatePaymentMethod: function () {
                    axios.post('/umbraco/api/paymentMethod/update', this.CheckoutModel).then(response => {
                        this.refreshBasket();
                    });
                },
                checkoutStepsSatisfied: function () {
                    return Object.values(this.CheckoutModel)
                        .every(step =>
                            typeof step != "undefined"
                        );
                },
                complete: function (e) {
                    if (this.checkoutStepsSatisfied()) {
                        axios.get('/umbraco/api/checkout/getpaymentpageurl').then(response => {
                            top.location.href = response.data;
                        }).catch(function (error) {
                            if (error.response) {
                                // The request was made and the server responded with a status code
                                // that falls out of the range of 2xx
                                alert("Please provide all information");
                                console.log(error.response);
                            } else {
                                console.log('Error', error.message);
                            }
                        });;
                    }
                    else
                        alert("Please provide all information");
                },
                updateOrderLine: function (orderLineId, newQuantity) {
                    axios.post('/umbraco/api/basket/updateorderline',
                        {
                            OrderLineId: orderLineId,
                            NewQuantity: newQuantity
                        }).then(response => {
                            this.refreshBasket();
                        });
                }
            },
            beforeMount() {
                this.refreshBasket();
            }
        })
    </script>
